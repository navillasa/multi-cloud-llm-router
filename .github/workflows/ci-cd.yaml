name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

env:
  GO_VERSION: '1.21'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test router
      run: |
        cd router
        go mod tidy
        go test -v ./...
        go vet ./...
        
    - name: Validate Docker Compose
      run: |
        docker compose config

  lint-charts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Lint Helm charts (for future use)
      run: |
        helm lint charts/llm-server
        helm lint charts/platform
        helm template test-release charts/llm-server --values charts/llm-server/values-aws.yaml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Future: Build and deploy images when moving to Kubernetes
  # build-and-deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   steps:
  #   - name: Build and push to registry
  #     run: |
  #       echo "Future: Build images for Kubernetes deployment"
  #       # docker build and push to ghcr.io
  #   - name: Deploy via ArgoCD
  #     run: |
  #       echo "Future: Trigger ArgoCD sync for Kubernetes clusters"
